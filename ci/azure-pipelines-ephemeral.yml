
trigger: none

pr:
  branches:
    include:
    - master

stages:

- stage: Build
  jobs:
  - job: Web
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: Npm@1
      displayName: 'npm install'
      inputs:
        workingDir: 'news-web'
        verbose: false
    
    - task: Npm@1
      displayName: 'npm run lint'
      inputs:
        command: custom
        workingDir: 'news-web'
        verbose: false
        customCommand: 'run lint'
    
    - task: Npm@1
      displayName: 'npm run test:ci'
      inputs:
        command: custom
        workingDir: 'news-web'
        verbose: false
        customCommand: 'run test:ci'
    
    - task: Npm@1
      displayName: 'npm run build'
      inputs:
        command: custom
        workingDir: 'news-web'
        verbose: false
        customCommand: 'run build --prod'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml' 
        searchFolder: '$(System.DefaultWorkingDirectory)/news-web/output/results/junit' # Optional
        mergeTestResults: true
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: $(System.DefaultWorkingDirectory)/news-web/output/coverage/jest/cobertura-coverage.xml 
        failIfCoverageEmpty: true

  - job: Functions
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: 'news-functions/*.csproj'
        workingDirectory: '/news-functions'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'news-functions/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(Parameters.RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'functions-ci'
      condition: succeededOrFailed()

- stage: Infrastructure
  jobs:
  - job: Apply
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: AzureCLI@1 
      displayName: 'Get Azure Vars'
      inputs:
        azureSubscription: 'AzureCommunityPL/news (d126dc91-4b54-4b49-857d-4e0c0f67fdfa)'
        scriptLocation: inlineScript
        inlineScript: |
         echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -g tf -n tfnewsappstate --query "[0].value" -o tsv)"
         echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
         echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"
         echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query  "tenantId" -o tsv)"
         echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query  "id" -o tsv)"

         printenv
        addSpnToEnvironment: true
    
    - script: 'terraform init'
      workingDirectory: 'news-infrastructure'
      displayName: 'terraform init'
    
    - script: |
       export workspace=pr$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER
       echo $workspace
       if terraform workspace select $workspace ; then
           echo "Command succeeded"
       else
           terraform workspace new $workspace
           terraform workspace select $workspace
       fi
      workingDirectory: 'news-infrastructure'
      displayName: 'terraform workspace'
    
    - script: 'terraform validate'
      workingDirectory: 'news-infrastructure'
      displayName: 'terraform validate'
    
    - script: 'terraform plan'
      workingDirectory: 'news-infrastructure'
      displayName: 'terraform plan'

- stage: Publish
  jobs:
  - job: Functions
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'functions-ci'
